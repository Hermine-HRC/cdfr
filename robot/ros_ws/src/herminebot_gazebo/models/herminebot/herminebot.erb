<?xml version='1.0'?>
<sdf version='1.7'>
    <!-- Some values are totally unrealistic. This allows to have a stable robot -->
    <model name='herminebot'>
        <static>false</static>

        <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
        <pose>0.0 0.0 0.0 0.0 0.0 0.0</pose>
        <link name="base_footprint"/>

        <!-- ********************** ROBOT BASE *********************************  -->
        <link name="base_link">
            <inertial>
                <pose>0 0 0 0 0 0</pose>
                <mass>5.0</mass>
            </inertial>

            <visual name="base_visual">
                <pose>0 0 0 0 0 0</pose>
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/base_visual.dae</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
            </visual>

            <collision name="base_collision">
                <pose>0 0 0.014 0 0 0</pose>
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/base_collision.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
            </collision>
        </link>

        <joint name="base_joint" type="fixed">
            <parent>base_footprint</parent>
            <child>base_link</child>
            <pose>0 0 0.2 0 0 0</pose>
        </joint>

        <!-- ********************** IMU *********************************  -->
        <link name="imu_link">
            <pose>0 0 0.02 0 0 0</pose>
            <gravity>true</gravity>
            <visual name="imu_visual">
                <geometry>
                    <box>
                        <size>0.019 0.027 0.003</size>
                    </box>
                </geometry>
                <material>
                    <ambient>0.0 0.0 1.0 1.0</ambient>
                    <diffuse>0.0 0.0 1.0 1.0</diffuse>
                    <specular>0.0 0.0 0.0 1.0</specular>
                    <emissive>0.0 0.0 0.0 1.0</emissive>
                </material>
            </visual>

            <topic>imu/data</topic>

            <sensor name="hrc_imu" type="imu">
                <always_on>true</always_on>
                <update_rate>100</update_rate>
                <visualize>true</visualize>
                <imu>
                    <orientation>
                        <x>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-3</stddev>
                            </noise>
                        </x>
                        <y>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-3</stddev>
                            </noise>
                        </y>
                        <z>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-3</stddev>
                            </noise>
                        </z>
                    </orientation>
                    <angular_velocity>
                        <x>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-4</stddev>
                            </noise>
                        </x>
                        <y>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-4</stddev>
                            </noise>
                        </y>
                        <z>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>2e-4</stddev>
                            </noise>
                        </z>
                    </angular_velocity>
                    <linear_acceleration>
                        <x>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>1.7e-2</stddev>
                            </noise>
                        </x>
                        <y>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>1.7e-2</stddev>
                            </noise>
                        </y>
                        <z>
                            <noise type="gaussian">
                                <mean>0.0</mean>
                                <stddev>1.7e-2</stddev>
                            </noise>
                        </z>
                    </linear_acceleration>
                </imu>
            </sensor>
        </link>

        <joint name="imu_joint" type="fixed">
            <parent>base_link</parent>
            <child>imu_link</child>
            <pose>0 0 0 0 0 0</pose>
        </joint>

        <!-- ****************************** LIDAR *****************************    -->
        <link name="lidar_link">

            <visual name="lidar_visual">
                <pose>0 0 0.39 0 0 0</pose>
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/lidar.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
                <material>
                    <ambient>0.0 0.0 0.0 1.0</ambient>
                    <diffuse>0.0 0.0 0.0 1.0</diffuse>
                    <specular>0.0 0.0 0.0 1.0</specular>
                    <emissive>0.0 0.0 0.0 1.0</emissive>
                </material>
            </visual>

            <topic>scan</topic>
            <gz_frame_id>lidar_link</gz_frame_id>

            <frame name="base_link" attached_to="base_link">
                <pose>0 0 0 0 0 0</pose>
            </frame>

            <sensor name="lidar" type="gpu_lidar">
                <pose>0 0 0.42 0 0 0</pose>
                <always_on>true</always_on>
                <visualize>true</visualize>
                <update_rate>5</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>360</samples>
                            <resolution>1.00000</resolution>
                            <min_angle>-3.14159265</min_angle>
                            <max_angle>3.14159265</max_angle>
                        </horizontal>
                    </scan>
                    <range>
                        <min>0.120000</min>
                        <max>4.0</max>
                        <resolution>0.015000</resolution>
                    </range>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.01</stddev>
                    </noise>
                </ray>
            </sensor>
        </link>

        <joint name="lidar_joint" type="fixed">
            <parent>base_link</parent>
            <child>lidar_link</child>
            <pose>0 0 0 0 0 0</pose>
        </joint>

        <!-- *********************** DRIVE WHEELS ******************************  -->
        <%
            center_dist = 0.0893
            prefixes = ["left", "right"]
            for i in (0..1)
                prefix = prefixes[i]
        %>
        <link name="<%= prefix %>_wheel_link">
            <pose>-0.0007 <%= i == 0 ? center_dist : -center_dist %> 0.0345 0 0 0</pose>
            <inertial>
                <mass>50</mass>
            </inertial>
            <collision name="<%= prefix %>_wheel_collision">
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/wheel.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
                <surface>
                    <friction>
                        <ode>
                            <mu>0.9</mu>
                            <mu2>0.9</mu2>
                        </ode>
                    </friction>
                </surface>
            </collision>
            <visual name="<%= prefix %>_wheel_visual">
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/wheel.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
                <material>
                    <ambient>0.7 0.8 0.05 1.0</ambient>
                    <diffuse>0.7 0.8 0.05 1.0</diffuse>
                    <specular>0.0 0.0 0.0 1.0</specular>
                    <emissive>0.0 0.0 0.0 1.0</emissive>
                </material>
            </visual>
        </link>

        <joint name="<%= prefix %>_wheel_joint" type="revolute">
            <parent>base_link</parent>
            <child><%= prefix %>_wheel_link</child>
            <pose>0 0 0 1.570796 0 0</pose>
            <axis>
                <xyz>0 0 -1</xyz>
                <limit>
                    <effort>200</effort>
                </limit>
            </axis>
        </joint>
        <%
            end
        %>

        <!-- *********************** CASTER WHEELS ***************************** -->
        <%
            poses = [[-0.061, -0.1097], [-0.061, 0.1097], [0.061,  -0.1097], [0.061, 0.1097]]
            for i in (0..3)
                x, y = poses[i]
        %>
        <link name="caster_wheel_link_<%= i.to_s %>">
            <pose><%= x %> <%= y %> 0.0097 0 0 0</pose>
            <inertial>
                <mass><%= i < 2 ? 49 : 50 %></mass>
            </inertial>
            <collision name="caster_wheel_collision_<%= i.to_s %>">
                <geometry>
                    <sphere>
                        <radius>0.006</radius>
                    </sphere>
                </geometry>
                <surface>
                    <friction>
                        <ode>
                            <mu>0.01</mu>
                            <mu2>0.01</mu2>
                        </ode>
                    </friction>
                </surface>
            </collision>
        </link>

        <joint name='caster_joint_<%= i.to_s %>' type='fixed'>
            <parent>base_link</parent>
            <child>caster_wheel_link_<%= i.to_s %></child>
            <pose>0 0 0 0 0 0</pose>
        </joint>

        <%
            end
        %>

        <!-- ********************** LASER SENSORS ******************************  -->

        <%
            poses = [
                [0.085, 0.05, 0.025, 0, -0.21817, 0],
                [0.085, -0.05, 0.025, 0, -0.21817, 0],
                [-0.057, 0.05, 0.025, 0, -0.21817, 3.14159265],
                [-0.057, -0.05, 0.025, 0, -0.21817, 3.14159265]
            ]
            for i in (1..4)
                x, y, z, roll, pitch, yaw = poses[i - 1]
        %>
        <link name="laser_sensor_<%= i.to_s %>_link">
            <pose><%=x%> <%=y%> <%=z%> <%=roll%> <%=pitch%> <%=yaw%></pose>
            <visual name="laser_sensor_<%= i.to_s %>_visual">
                <geometry>
                    <box>
                        <size>0.003 0.025 0.0107</size>
                    </box>
                </geometry>
                <material>
                    <ambient>0.6 0.0 0.6 1.0</ambient>
                    <diffuse>0.3 0.0 0.3 1.0</diffuse>
                    <specular>0.0 0.0 0.0 1.0</specular>
                    <emissive>0.0 0.0 0.0 1.0</emissive>
                </material>
            </visual>

            <gz_frame_id>laser_sensor_<%= i.to_s %>_link</gz_frame_id>
            <topic>laser_sensor_scan/id_<%= i.to_s %></topic>

            <sensor name="laser_sensor_<%= i.to_s %>" type="gpu_lidar">
                <pose>0 0 0 0 0 0</pose>
                <always_on>true</always_on>
                <visualize>true</visualize>
                <update_rate>10</update_rate>
                <ray>
                    <scan>
                        <horizontal>
                            <samples>15</samples>
                            <resolution>1.00000</resolution>
                            <min_angle>-0.21817</min_angle>
                            <max_angle>0.21817</max_angle>
                        </horizontal>
                        <vertical>
                            <samples>15</samples>
                            <resolution>1.00000</resolution>
                            <min_angle>-0.21817</min_angle>
                            <max_angle>0.21817</max_angle>
                        </vertical>
                    </scan>
                    <range>
                        <min>0.05</min>
                        <max>2.0</max>
                        <resolution>0.01</resolution>
                    </range>
                    <noise>
                        <type>gaussian</type>
                        <mean>0.0</mean>
                        <stddev>0.005</stddev>
                    </noise>
                </ray>
            </sensor>
        </link>

        <joint name="laser_sensor_<%= i.to_s %>_joint" type="fixed">
            <parent>base_link</parent>
            <child>laser_sensor_<%= i.to_s %>_link</child>
            <pose>0 0 0 0 0 0</pose>
        </joint>

        <%
            end
        %>

        <!-- ELEVATORS -->

        <%
            nb_elevators = 1
            poses = [[0.06, 0.0, 0.0]]
            for i in (0..nb_elevators-1)
                x, y, yaw = poses[i]
        %>
        <!-- elevators support -->
        <link name="elevator_support_<%= i.to_s %>_link">
            <pose><%=x%> <%=y%> 0.02 0 0 <%=yaw%></pose>
            <visual name="elevator_support_<%= i.to_s %>_visual">
                <pose>0 0 0 0 0 0</pose>
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/elevator_support.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
                <material>
                    <ambient>0.7 0.7 0.7 1.0</ambient>
                    <diffuse>0.4 0.4 0.4 1.0</diffuse>
                    <specular>0.0 0.0 0.0 1.0</specular>
                    <emissive>0.0 0.0 0.0 1.0</emissive>
                </material>
            </visual>
        </link>

        <joint name="elevator_support_<%= i.to_s %>_joint" type="fixed">
            <parent>base_link</parent>
            <child>elevator_support_<%= i.to_s %>_link</child>
            <pose>0 0 0 0 0 0</pose>
        </joint>

        <!-- elevator -->
        <link name="elevator_<%= i.to_s %>_link">
            <pose><%= x + 0.0125 * Math.cos(yaw)%> <%=y + 0.0125 * Math.sin(yaw)%> 0.02 0 0 <%=yaw%></pose>
            <visual name="elevator_<%= i.to_s %>_visual">
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/elevator.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
                <material>
                    <ambient>0.1 0.1 0.1 1.0</ambient>
                    <diffuse>0.0 0.0 0.0 1.0</diffuse>
                    <specular>0.0 0.0 0.0 1.0</specular>
                    <emissive>0.0 0.0 0.0 1.0</emissive>
                </material>
            </visual>
            <collision name="elevator_<%= i.to_s %>_collision">
                <geometry>
                    <mesh>
                        <uri>model://herminebot/meshes/elevator.stl</uri>
                        <scale>1.0 1.0 1.0</scale>
                    </mesh>
                </geometry>
            </collision>
        </link>

        <joint name="elevator_<%= i.to_s %>_joint" type="prismatic">
            <parent>elevator_support_<%= i.to_s %>_link</parent>
            <child>elevator_<%= i.to_s %>_link</child>
            <pose>0 0 0 0 0 0</pose>
            <axis>
                <xyz>0 0 1</xyz>
                <limit>
                    <lower>-0.01</lower>
                    <upper>0.2</upper>
                    <velocity>0.1</velocity>
                </limit>
            </axis>
        </joint>

        <plugin
            name="ignition::gazebo::systems::JointPositionController"
            filename="ignition-gazebo-joint-position-controller-system"
        >
            <joint_name>elevator_<%= i.to_s %>_joint</joint_name>
            <topic>elevator_pose/id_<%= i.to_s %></topic>
            <initial_position>0.02</initial_position>
            <p_gain>6700</p_gain>
            <i_gain>700</i_gain>
            <d_gain>30</d_gain>
        </plugin>

        <%
            end
        %>

        <!-- PLUGINS -->

        <plugin name="ignition::gazebo::systems::DiffDrive" filename="ignition-gazebo-diff-drive-system">

            <!-- Wheel Information -->
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>
            <wheel_separation>0.14</wheel_separation>
            <wheel_radius>0.062</wheel_radius>

            <topic>cmd_vel</topic>

            <!-- Limits -->
            <max_linear_acceleration>1.0</max_linear_acceleration>
            <min_linear_acceleration>-1.0</min_linear_acceleration>
            <max_angular_acceleration>2</max_angular_acceleration>
            <min_angular_acceleration>-2</min_angular_acceleration>
            <max_linear_velocity>0.55</max_linear_velocity>
            <min_linear_velocity>-0.55</min_linear_velocity>
            <max_angular_velocity>2.5</max_angular_velocity>
            <min_angular_velocity>-2.5</min_angular_velocity>

            <!-- Output -->
            <publish_odom>false</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>false</publish_wheel_tf>

            <odom_topic>odom</odom_topic>
            <frame_id>odom</frame_id>
            <child_frame_id>base_footprint</child_frame_id>

        </plugin>

        <plugin
            filename="libignition-gazebo6-odometry-publisher-system"
            name="ignition::gazebo::systems::OdometryPublisher"
        >
            <odom_publish_frequency>50</odom_publish_frequency>
        </plugin>

        <plugin
            name="ignition::gazebo::systems::JointStatePublisher"
            filename="ignition-gazebo-joint-state-publisher-system"
        >
            <topic>joint_states</topic>
            <joint_name>left_wheel_joint</joint_name>
            <joint_name>right_wheel_joint</joint_name>
            <%
                for i in (0..nb_elevators-1)
            %>
            <joint_name>elevator_<%= i.to_s %>_joint</joint_name>
            <%
                end
            %>
        </plugin>
    </model>
</sdf>
