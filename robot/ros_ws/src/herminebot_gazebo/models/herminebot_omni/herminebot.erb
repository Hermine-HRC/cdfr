<?xml version="1.0" ?>
<sdf version="1.7">
    <model name="herminebot_omni">
        <static>false</static>

        <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
        <pose>0.0 0.0 0.0 0.0 0.0 0.0</pose>
        <link name="base_footprint"/>

        <!-- ****************** ROBOT BASE ***************************  -->
        <link name="base_link">
            <pose>0 0 0.05 0 0 0</pose>
            <inertial>
                <mass>5.0</mass>
            </inertial>
            <visual name="base_visual">
                <geometry>
                    <cylinder>
                        <radius>0.1</radius>
                        <length>0.1</length>
                    </cylinder>
                </geometry>
            </visual>
            <collision name="base_collision">
                <geometry>
                    <cylinder>
                        <radius>0.1</radius>
                        <length>0.1</length>
                    </cylinder>
                </geometry>
            </collision>
        </link>

        <joint name="base_joint" type="fixed">
            <parent>base_footprint</parent>
            <child>base_link</child>
            <pose>0 0 0 0 0 0</pose>
        </joint>

        <!-- ****************** ROBOT WHEELS ***************************  -->
        <%
            center_dist = 0.11
            wheel_prefixes = ["front", "left", "right"]
            PI_2 = Math::PI / 2
            wheel_z_off = 0.02
            for i in 0..wheel_prefixes.size-1
                prefix = wheel_prefixes[i]
                theta = i * 2 * Math::PI / wheel_prefixes.size
        %>
            <link name="<%= prefix %>_wheel">
                <pose>
                    <%= center_dist * Math.cos(theta)%> 
                    <%= center_dist * Math.sin(theta)%> <%= wheel_z_off %>
                    0 <%= PI_2 %> <%= theta %>
                </pose>
                <inertial>
                    <mass>0.1</mass>
                </inertial>
                <visual name="<%= prefix %>_wheel_visual">
                    <geometry>
                        <cylinder>
                            <radius>0.027</radius>
                            <length>0.02</length>
                        </cylinder>
                    </geometry>
                    <material>
                        <ambient>0.5 0.5 0.5 1</ambient>
                        <diffuse>0.4 0.4 0.4 1</diffuse>
                        <specular>0.5 0.5 0.5 1</specular>
                    </material>
                </visual>
                <collision name="<%= prefix %>_wheel_collision">
                    <geometry>
                        <cylinder>
                            <radius>0.027</radius>
                            <length>0.02</length>
                        </cylinder>
                    </geometry>
                </collision>
            </link>

            <joint name="<%= prefix %>_wheel_joint" type="revolute">
                <parent>base_link</parent>
                <child><%= prefix %>_wheel</child>
                <pose>0 0 0 0 0 0</pose>
                <axis>
                    <xyz>0 0 -1</xyz>
                    <limit>
                        <effort>50</effort>
                    </limit>
                </axis>
            </joint>

            <plugin
                name="gz::sim::systems::JointController"
                filename="gz-sim-joint-controller-system"
            >
                <joint_name><%= prefix %>_wheel_joint</joint_name>
                <topic>wheel_cmd/<%= prefix %></topic>
                <initial_velocity>0.0</initial_velocity>
            </plugin>

            <!-- ROLLERS -->
            <%
                roller_prefixes = ["n", "ne", "e", "se", "s", "sw", "w", "nw"]
                wheel_radius = 0.027 # To place the center of the roller
                if (i == 0)
                    beta = 0
                elsif (i == 1)
                    beta = Math::PI / 3
                else 
                    beta = 5 * Math::PI / 3
                end
                for j in 0..roller_prefixes.size-1
                    roller_prefix = roller_prefixes[j]
                    alpha = j * 2 * Math::PI / roller_prefixes.size
            %>
                <link name="<%= prefix %>_wheel_roller_<%= roller_prefix %>">
                    <pose>
                        <%= center_dist * Math.cos(theta) + wheel_radius * Math.sin(alpha) * Math.sin(beta) %>
                        <%= center_dist * Math.sin(theta) + wheel_radius * Math.sin(alpha) * Math.cos(beta) %>
                        <%= wheel_z_off + wheel_radius * Math.cos(-alpha) %>
                        0 <%= PI_2 + (i == 0 ? alpha : -alpha) %> <%= theta + PI_2 %>
                    </pose>
                    <visual name="<%= prefix %>_wheel_roller_<%= roller_prefix %>_visual">
                        <geometry>
                            <cylinder>
                                <radius>0.004</radius>
                                <length>0.015</length>
                            </cylinder>
                        </geometry>
                        <material>
                            <ambient>0.8 0.4 0.4 1</ambient>
                            <diffuse>0.8 0.4 0.4 1</diffuse>
                            <specular>0.8 0.5 0.5 1</specular>
                        </material>
                    </visual>
                    <collision name="<%= prefix %>_wheel_roller_<%= roller_prefix %>_collision">
                        <geometry>
                            <cylinder>
                                <radius>0.005</radius>
                                <length>0.015</length>
                            </cylinder>
                        </geometry>
                        <surface>
                            <friction>
                                <ode>
                                    <mu>0.9</mu>
                                    <mu2>0.9</mu2>
                                </ode>
                            </friction>
                        </surface>
                    </collision>
                </link>
                <joint name="<%= prefix %>_wheel_roller_<%= roller_prefix %>_joint" type="revolute">
                    <parent><%= prefix %>_wheel</parent>
                    <child><%= prefix %>_wheel_roller_<%= roller_prefix %></child>
                    <pose>0 0 0 0 0 0</pose>
                    <axis>
                        <xyz>0 0 1</xyz>
                        <limit>
                            <effort>0.0001</effort>
                        </limit>
                    </axis>
                </joint>
            <%
                end
            %>
        <%
            end
        %>

        <plugin
            name="gz::sim::systems::JointStatePublisher"
            filename="gz-sim-joint-state-publisher-system"
        >
            <topic>joint_states</topic>
            <%
                for prefix in wheel_prefixes
            %>
                <joint_name><%= prefix %>_wheel_joint</joint_name>
            <%
                end
            %>
        </plugin>
    </model>
</sdf>
