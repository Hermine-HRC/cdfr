<%
   PI_4 = Math::PI / 4
   PI_2 = Math::PI / 2
   PI = Math::PI
   MAX_LINEAR_VELOCITY = 0.5
   MAX_ANGULAR_VELOCITY = 2.0
%>

amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.002
    alpha2: 0.002
    alpha3: 0.002
    alpha4: 0.002
    alpha5: 0.002
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 15.0
    laser_min_range: 0.15
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::OmniMotionModel"
    save_pose_rate: 0.5
    set_initial_pose: true
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: "/scan"

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    odom_topic: /odometry/filtered
    goal_blackboard_id: goal
    goals_blackboard_id: goals
    path_blackboard_id: path
    bt_loop_duration: 200 # in ms
    default_server_timeout: 20
    default_nav_to_pose_bt_xml: $(find-pkg-share herminebot_navigation)/behavior_tree/navigate_to_pose_and_recovery.xml
    default_nav_through_poses_bt_xml: $(find-pkg-share herminebot_navigation)/behavior_tree/navigate_through_poses_and_recovery.xml
    navigators: ["navigate_to_pose", "navigate_through_poses", "preempt"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    preempt:
      plugin: "hrc_bt_navigator::NavigatorPreemption"
    plugin_lib_names:
      - hrc_move_elevator_action_bt_node
      - hrc_manage_map_service_bt_node
      - hrc_omni_drive_action_bt_node
    error_code_names:
      - compute_path_error_code
      - follow_path_error_code

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.5
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::PoseProgressChecker"
      required_movement_radius: 0.1
      required_movement_angle: 0.5
      movement_time_allowance: 5.0
    goal_checker:
      stateful: True
      plugin: "nav2_controller::StoppedGoalChecker"
      xy_goal_tolerance: 0.02
      yaw_goal_tolerance: 0.05
      trans_stopped_velocity: 0.01
      rot_stopped_velocity: 0.01
    FollowPath:
      plugin: "hrc_regulated_rotation_controller::RegulatedRotationController"
      primary_controller: "hrc_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      p_gain: 0.2
      i_gain: 0.015
      d_gain: 2.0
      max_rotation_vel: <%= MAX_ANGULAR_VELOCITY %>

      # Primary controller parameters
      desired_linear_vel: <%= MAX_LINEAR_VELOCITY %>
      lookahead_dist: 0.2
      min_lookahead_dist: 0.01
      max_lookahead_dist: 0.4
      lookahead_time: 1.5
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.05
      approach_velocity_scaling_dist: 0.3
      use_collision_detection: false
      max_allowed_time_to_collision_up_to_carrot: 1.0
      use_regulated_linear_velocity_scaling: true
      use_cost_regulated_linear_velocity_scaling: true
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.25
      use_fixed_curvature_lookahead: false
      curvature_lookahead_dist: 1.0
      allow_reversing: true
      use_rotate_to_heading: true
      max_robot_pose_search_dist: 10.0
      interpolate_curvature_after_goal: false
      cost_scaling_dist: 0.3
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 50.0
      use_omni_drive: true

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 10.0
    max_velocity: [<%= MAX_LINEAR_VELOCITY %>, <%= MAX_LINEAR_VELOCITY %>, <%= MAX_ANGULAR_VELOCITY %>]
    min_velocity: [<%= -MAX_LINEAR_VELOCITY %>, <%= -MAX_LINEAR_VELOCITY %>, <%= -MAX_ANGULAR_VELOCITY %>]
    max_accel: [2.5, 2.5, 3.2]
    max_decel: [-2.5, -2.5, -3.2]

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 1
      height: 1
      resolution: 0.1
      robot_radius: 0.16
      plugins: ["obstacle_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          clearing: true
          marking: true
          obstacle_max_range: 0.01
          raytrace_max_range: 0.01
      always_send_full_costmap: False
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 2.0
      publish_frequency: 2.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.16
      resolution: 0.02
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "hrc_costmap_2d::ObstacleLayer"
        enabled: True
        inflation_radius: 0.15
        polygon: [
          1.45, 0.95,
          1.45, -0.95,
          -1.45, -0.95,
          -1.45, 0.95
        ]
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 4.0
          obstacle_max_range: 4.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 50.0
        inflation_radius: 0.95
      always_send_full_costmap: False
      filters: ["keepout_filter"]
      keepout_filter:
        plugin: "hrc_costmap_2d::KeepoutFilter"
        filter_info_topic: "/costmap_filter_info"
        enabled: True
        inflation_radius: 0.1
        cost_scaling_factor: 30.0
  global_costmap_client:
    ros__parameters:
      use_sim_time: True
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

map_server:
  ros__parameters:
    frame_id: map
    topic_name: map
    use_sim_time: True
    yaml_filename: "full_map.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

costmap_filter_info_server:
  ros__parameters:
    use_sim_time: true
    type: 0
    filter_info_topic: "/costmap_filter_info"
    mask_topic: "/keepout_filter_mask"
    base: 0.0
    multiplier: 1.0

map_modifier:
  ros__parameters:
    global_frame: "map"
    mask_filter_topic: "/keepout_filter_mask"
    mask_width: 3.0
    mask_height: 2.0
    mask_resolution: 0.02
    mask_origin: [-1.5, -1.0]

elements_mask_server:
  ros__parameters:
    frame_id: map
    topic_name: "/elements_mask"
    use_sim_time: True
    yaml_filename: $(find-pkg-share herminebot_navigation)/maps/elements_mask.yaml

collision_monitor:
<%
   def generate_arc_circle(radius, start_angle, end_angle)
      points = [[0.0, 0.0]]
      if start_angle > end_angle
         end_angle += PI * 2
      end
      for angle in (start_angle..end_angle).step(0.3)
         points << [radius * Math.cos(angle), radius * Math.sin(angle)]
      end
      return points
   end
%>
  ros__parameters:
    base_frame_id: "base_footprint"
    source_base_frame_id: "map"
    odom_frame_id: "odom"
    cmd_vel_in_topic: "cmd_vel_smoothed"
    cmd_vel_out_topic: "cmd_vel"
    state_topic: "collision_monitor_state"
    transform_tolerance: 0.5
    source_timeout: 5.0
    base_shift_correction: True
    stop_pub_timeout: 0.4
    enable_stamped_cmd_vel: False
    use_realtime_priority: false
    time_to_clear_costmap: 5.0
    polygons: ["VelocityPolygonStopScan", "VelocityPolygonLimitScan", "VelocityPolygonStop", "VelocityPolygonLimit", "PolygonSource"]
    VelocityPolygonStopScan:
      type: "velocity_polygon"
      action_type: "stop"
      min_points: 3
      visualize: True
      polygon_pub_topic: "collision_monitor/polygon_velocity_stop_scan"
      enabled: True
      holonomic: True
      sources_names: ["scan"]
      velocity_polygons: ["rotation_only", "forward", "backward", "left", "right", "stopped"]
      rotation_only:
        points: "<%= generate_arc_circle(0.05, -PI, PI) %>"
        linear_min: -0.01
        linear_max: 0.01
        theta_min: -3.0
        theta_max: 3.0
      forward:
        points: "<%= generate_arc_circle(0.35, -PI_2, PI_2) %>"
        linear_min: 0.0
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -PI_4 %>
        direction_end_angle: <%= PI_4 %>
      backward:
        points: "<%= generate_arc_circle(0.35, PI_2, -PI_2) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: 0.0
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= 3 * PI_4 %>
        direction_end_angle: <%= -3 * PI_4 %>
      right:
        points: "<%= generate_arc_circle(0.35, -PI, 0.0) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -3 * PI_4 %>
        direction_end_angle: <%= -PI_4 %>
      left:
        points: "<%= generate_arc_circle(0.35, 0.0, PI) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= PI_4 %>
        direction_end_angle: <%= 3 * PI_4 %>
      stopped:
        points: "<%= generate_arc_circle(0.35, 0.001, -0.001) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
    VelocityPolygonLimitScan:
      type: "velocity_polygon"
      action_type: "limit"
      min_points: 3
      visualize: True
      polygon_pub_topic: "collision_monitor/polygon_velocity_limit_scan"
      linear_limit: 0.2
      angular_limit: <%= MAX_ANGULAR_VELOCITY %>
      enabled: True
      holonomic: True
      sources_names: ["scan"]
      velocity_polygons: ["rotation_only", "forward", "backward", "left", "right", "limited"]
      rotation_only:
        points: "<%= generate_arc_circle(0.05, -PI, PI) %>"
        linear_min: -0.01
        linear_max: 0.01
        theta_min: -3.0
        theta_max: 3.0
      forward:
        points: "<%= generate_arc_circle(0.5, -PI_2, PI_2) %>"
        linear_min: 0.0
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -PI_4 %>
        direction_end_angle: <%= PI_4 %>
      backward:
        points: "<%= generate_arc_circle(0.5, PI_2, -PI_2) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: 0.0
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= 3 * PI_4 %>
        direction_end_angle: <%= -3 * PI_4 %>
      left:
        points: "<%= generate_arc_circle(0.5, 0.0, PI) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= PI_4 %>
        direction_end_angle: <%= 3 * PI_4 %>
      right:
        points: "<%= generate_arc_circle(0.5, -PI, 0.0) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -3 * PI_4 %>
        direction_end_angle: <%= -PI_4 %>
      limited:
        points: "<%= generate_arc_circle(0.5, 0.001, -0.001) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
    VelocityPolygonStop:
      type: "velocity_polygon"
      action_type: "stop"
      min_points: 3
      visualize: True
      polygon_pub_topic: "collision_monitor/polygon_velocity_stop"
      enabled: True
      holonomic: true
      velocity_polygons: ["rotation_only", "forward", "backward", "left", "right", "stopped"]
      rotation_only:
        points: "<%= generate_arc_circle(0.05, -PI, PI) %>"
        linear_min: -0.01
        linear_max: 0.01
        theta_min: -3.0
        theta_max: 3.0
      forward:
        points: "<%= generate_arc_circle(0.2, -PI_2, PI_2) %>"
        linear_min: 0.0
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -PI_4 %>
        direction_end_angle: <%= PI_4 %>
      backward:
        points: "<%= generate_arc_circle(0.2,PI_2, -PI_2) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: 0.0
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= 3 * PI_4 %>
        direction_end_angle: <%= -3 * PI_4 %>
      left:
        points: "<%= generate_arc_circle(0.2, 0.0, PI) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= PI_4 %>
        direction_end_angle: <%= 3 * PI_4 %>
      right:
        points: "<%= generate_arc_circle(0.2, -PI, 0.0) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -3 * PI_4 %>
        direction_end_angle: <%= -PI_4 %>
      stopped:
        points: "<%= generate_arc_circle(0.2, 0.01, -0.01) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
    VelocityPolygonLimit:
      type: "velocity_polygon"
      action_type: "limit"
      min_points: 3
      visualize: True
      polygon_pub_topic: "collision_monitor/polygon_velocity_limit"
      linear_limit: 0.2
      angular_limit: 1.5
      enabled: True
      holonomic: true
      velocity_polygons: ["rotation_only", "forward", "backward", "left", "right", "limited" ]
      rotation_only:
        points: "<%= generate_arc_circle(0.05, -PI, PI) %>"
        linear_min: -0.01
        linear_max: 0.01
        theta_min: -3.0
        theta_max: 3.0
      forward:
        points: "<%= generate_arc_circle(0.35, -PI_2, PI_2) %>"
        linear_min: 0.0
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -PI_4 %>
        direction_end_angle: <%= PI_4 %>
      backward:
        points: "<%= generate_arc_circle(0.35, PI_2, -PI_2) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: 0.0
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= 3 * PI_4 %>
        direction_end_angle: <%= -3 * PI_4 %>
      left:
        points: "<%= generate_arc_circle(0.35, 0.0, PI) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= PI_4 %>
        direction_end_angle: <%= 3 * PI_4 %>
      right:
        points: "<%= generate_arc_circle(0.35, -PI, 0.0) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
        direction_start_angle: <%= -3 * PI_4 %>
        direction_end_angle: <%= -PI_4 %>
      limited:
        points: "<%= generate_arc_circle(0.35, 0.01, -0.01) %>"
        linear_min: <%= -MAX_LINEAR_VELOCITY %>
        linear_max: <%= MAX_LINEAR_VELOCITY %>
        theta_min: <%= -MAX_ANGULAR_VELOCITY %>
        theta_max: <%= MAX_ANGULAR_VELOCITY %>
    PolygonSource:
      type: "polygon"
      points: "[[1.45, 0.95], [1.45, -0.95], [-1.45, -0.95], [-1.45, 0.95]]"
      action_type: "source"
      min_points: 3
      visualize: True
      polygon_pub_topic: "collision_monitor/polygon_source"
      enabled: True
    observation_sources: ["scan"]
    scan:
      source_timeout: 0.2
      type: "scan"
      topic: "/scan"
      enabled: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 2.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.01
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "wait", "drive_on_heading", "move_elevators", "omni_drive"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
    wait:
      plugin: "nav2_behaviors::Wait"
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    move_elevators:
      plugin: "hrc_behaviors::MoveElevators"
    omni_drive:
      plugin: "hrc_behaviors::OmniDrive"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.5
    rotational_acc_lim: 2.5
    position_accuracy: 0.01

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    loop_rate: 2
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0
