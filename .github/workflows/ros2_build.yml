name: ROS2 test packages

on:
  push:
    branches: [ "master" ]
    paths:
      - 'robot/ros_ws/**'
      - '!**.md'
      - '!**.png'
      - '!robot/ros_ws/src/herminebot_head/sequences/*'
  pull_request:
    paths:
      - 'robot/ros_ws/**'
      - '!**.md'
      - '!**.png'
      - '!robot/ros_ws/src/herminebot_head/sequences/*'

jobs:
  build_and_test:

    runs-on: ubuntu-24.04

    steps:
      # Install some system packages
      - name: Install ROS 2 Jazzy packages
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt update && sudo apt install -y curl
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt install -y ros-dev-tools
          sudo apt update && sudo apt upgrade
          sudo apt install -y ros-jazzy-desktop ros-jazzy-ros-base
          sudo apt install -y python3-rosdep python3-pytest-rerunfailures
          sudo apt install -y ruby lcov libunwind-dev
          sudo apt install -y \
          ros-jazzy-robot-localization \
          ros-jazzy-navigation2 \
          ros-jazzy-nav2-bringup \
          ros-jazzy-nav2-map-server \
          ros-jazzy-tf-transformations \
          ros-jazzy-ros-gz

      - uses: actions/checkout@v4

      # Build for test coverage
      - name: Configure CMake flags and build executables
        run: |
          cd robot/ros_ws
          source /opt/ros/jazzy/setup.bash
          sudo rosdep init
          rosdep update --include-eol-distros
          rosdep install --from-paths src -y --ignore-src
          colcon build --packages-select hrc_interfaces
          source install/setup.bash
          colcon build --cmake-args -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="${CMAKE_CXX_FLAGS} --coverage" --packages-ignore hrc_interfaces
          # hrc_interfaces should not be included in lcov as it is fully autogenerated
          lcov --no-external --capture --initial --ignore-errors mismatch,mismatch,gcov --directory . --output-file ros2_base.info

      - name: Run tests and generate python coverage
        timeout-minutes: 1 # Avoid to be stuck in infinite loop
        run: |
          source /opt/ros/jazzy/setup.bash
          cd robot/ros_ws
          source install/setup.bash
          # The argument '--retest-until-pass' allows to reduce the probability of having false error
          colcon test --return-code-on-test-failure --pytest-with-coverage --retest-until-pass 5

      - name: Show test results
        if: failure()
        timeout-minutes: 1 # Avoid to be stuck printing value from an infinite loop
        run: |
          source /opt/ros/jazzy/setup.bash
          cd robot/ros_ws
          source install/setup.bash
          colcon test-result --all --verbose

      - name: Generate C++ code coverage
        if: success()
        run: |
          cd robot/ros_ws
          lcov --no-external --capture --ignore-errors mismatch,mismatch,gcov --directory . --output-file ros2.info
          lcov --add-tracefile ros2_base.info --add-tracefile ros2.info --output-file ros2_coverage.info
          lcov --extract ros2_coverage.info '*/src/*' --output-file ros2_coverage_filtered.info  # Only source files

      - name: Upload coverage result to CodeCov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          files: ${{github.workspace}}/robot/ros_ws/ros2_coverage_filtered.info,${{github.workspace}}/robot/ros_ws/build/*/coverage.xml
          # flags: unittests # optional
          disable_search: true
          # name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
